import java.text.SimpleDateFormat // Импорт класса для форматирования даты

plugins {
    id "java-library" // Подключает плагин для создания Java-библиотеки
    id "maven-publish" // Подключает плагин для публикации артефактов в репозитории Maven
    id "org.springframework.boot" version "2.6.3" // Подключает плагин для работы со Spring Boot
    id "io.spring.dependency-management" version "1.0.11.RELEASE" // Плагин для управления зависимостями Spring
    id "jacoco"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17) // Указывает использовать Java 17 для сборки проекта
    }
}

group = 'org.example' // Определяет группу (group ID) проекта
version = "1.0.0.75" // Определяет версию проекта

bootJar {
    enabled = false // Отключает создание jar-файла для Spring Boot приложения
}
jar {
    enabled = true // Включает создание обычного jar-файла
    manifest {
        attributes(
                'Version': archiveVersion, // Добавляет версию в манифест
                'Build-time': new SimpleDateFormat("dd-MM-yyyy'T'HH:mm:ss").format(new Date()) // Добавляет время сборки
        )
    }
}

compileJava {
    options.encoding = 'UTF-8' // Устанавливает кодировку UTF-8 для компиляции Java-кода
}

compileTestJava {
    options.encoding = 'UTF-8' // Устанавливает кодировку UTF-8 для компиляции тестового кода
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.docEncoding = 'UTF-8'
}


jar {
    enabled = true // Включает создание обычного jar-файла
    manifest {
        attributes 'Version': archiveVersion, // Добавляет версию в манифест
                'Build-time': new SimpleDateFormat("dd-MM-yyyy'T'HH:mm:ss").format(new Date()) // Добавляет время сборки
    }
}

compileJava.options.encoding = 'UTF-8' // Устанавливает кодировку UTF-8 для компиляции Java-кода
compileTestJava.options.encoding = 'UTF-8' // Устанавливает кодировку UTF-8 для компиляции тестового кода

configurations {
    compileOnly {
        extendsFrom annotationProcessor // Определяет, что конфигурация compileOnly расширяет конфигурацию annotationProcessor
    }
}

repositories {
    mavenLocal() // Подключает локальный Maven-репозиторий
    mavenCentral() // Подключает центральный репозиторий Maven
}

publishing {
    publications {
        mavenJava(MavenPublication) { // Создает публикацию типа Maven
            from components.java // Указывает, что публикация должна включать компонент Java
            artifactId = project.name // Устанавливает ID артефакта равным имени проекта
            groupId = project.group // Устанавливает group ID проекта
            version = project.version // Устанавливает версию артефакта
        }
    }
    repositories {
        mavenLocal() // Публикует в локальный репозиторий Maven
    }
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-autoconfigure:2.6.3' // Зависимость для автоматической конфигурации Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.3' // Зависимость для работы с REST API

    // Logging
    implementation 'org.slf4j:slf4j-api:1.7.32' // Зависимость для использования SLF4J API для логирования
    runtimeOnly 'ch.qos.logback:logback-classic:1.2.6' // Зависимость для реализации логирования с помощью Logback
    implementation 'net.logstash.logback:logstash-logback-encoder:6.6' // Зависимость для логирования в формате JSON

    // AspectJ
    implementation 'org.aspectj:aspectjweaver:1.9.7' // Зависимость для использования AspectJ для аспектно-ориентированного программирования
    //implementation 'org.springframework.boot:spring-boot-starter-aop'


    // Jaeger
    implementation 'io.opentracing.contrib:opentracing-spring-jaeger-starter:3.3.1' // Зависимость для использования Jaeger с OpenTracing и Spring
    testImplementation 'io.opentracing:opentracing-mock:0.33.0' // Зависимость для мокирования OpenTracing в тестах

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.26' // Зависимость только для компиляции кода с Lombok
    annotationProcessor 'org.projectlombok:lombok:1.18.26' // Зависимость для аннотаций Lombok при компиляции

    // JUnit 5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2' // Зависимость для использования JUnit 5 API в тестах
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2' // Зависимость для запуска тестов на JUnit 5

    // Mockito для тестирования
    testImplementation 'org.mockito:mockito-core:3.11.2' // Зависимость для использования Mockito в тестах
    testImplementation 'org.mockito:mockito-junit-jupiter:3.11.2' // Зависимость для интеграции Mockito с JUnit 5
}

test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED" // Логировать успешные, проваленные и пропущенные тесты
        showStandardStreams = true // Показывать стандартные потоки вывода (System.out, System.err)
    }
    finalizedBy jacocoTestReport
}

//В Gradle версии 7+ метод enabled для отчётов типа Report больше не поддерживается. Вместо этого используется метод required
//jacocoTestReport {
// dependsOn test
// reports {
// xml.enabled true
// xml.destination file("${buildDir}/reports/jacoco/report.xml")
// }
//}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true) // Устанавливаем отчёт в формате XML как обязательный
        xml.outputLocation.set(file("${buildDir}/reports/jacoco/report.xml")) // Указываем путь для сохранения отчёта
        html.required.set(true) // HTML-отчет
        html.outputLocation.set(file("${buildDir}/reports/jacoco/html")) // Путь к HTML-отчету
    }
}
